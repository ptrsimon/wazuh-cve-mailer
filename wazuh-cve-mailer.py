#!/usr/bin/python3
#
# wazuh-cve-mailer.py - get vulnerable packages on hosts from Wazuh API and send them as CSV
#

import datetime
import argparse
import requests
import json
import sys
import smtplib
import mimetypes
import re
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def parse_args():
    parser = argparse.ArgumentParser(
            description="Get vulnerable packages on hosts from Wazuh API and send them as CSV")
    parser.add_argument("-c", dest="config", type=str, help="config file location (default: /etc/wazuh-cve-mailer/wazuh-cve-mailer.conf)",
            default="/etc/wazuh-cve-mailer/wazuh-cve-mailer.conf")
    parser.add_argument("-l", dest="logfile", type=str, help="log file location (default: /var/log/wazuh-cve-mailer.log)",
            default="/var/log/wazuh-cve-mailer.log")
    parser.add_argument("-s", action="store_true", help="silent mode - no output")

    return parser.parse_args()

def log_msg(msg: str, logfile: str, level: str, silent: bool):
    if not silent:
        print(msg)

    try:
        fh = open(logfile, 'a')
    except OSError:
        print("Failed to open logfile: " + logfile)
        sys.exit(1)

    with fh:
        fh.write("{} {} {}".format(
            datetime.datetime.now().isoformat(),
            level,
            msg + "\n"))

def read_config(path: str, logpath: str, silent: bool):
    config = {}
    try:
        with open(path, "r") as fh:
            config = json.load(fh)
    except Exception as e:
        log_msg("Failed to read config: " + str(e), logpath, "ERROR", silent)
        sys.exit(1)

    return config

def get_token(url: str, user: str, pw: str, logpath: str, silent: bool):
    authurl = url + "/security/user/authenticate/"
    resp = requests.get(authurl, auth=(user, pw))
    if (resp.status_code != 200):
        log_msg("Failed to get auth token from " + authurl + ". Status code: " + str(resp.status_code),
                logpath, "ERROR", silent)
        sys.exit(1)

    return json.loads(resp.text)["data"]["token"]

def get_agents(url: str, token: str, pattern: str, logpath: str, silent: bool):
    agents = []
    agenturl = url + "/agents"
    patternre = re.compile(pattern)
    resp = requests.get(agenturl, params={"limit": 100000, "select": "id,name"},
        headers={"Authorization": "Bearer " + token})
    if (resp.status_code != 200):
        log_msg("Failed to get agents from " + authurl + ". Status code: " + str(resp.status_code),
                logpath, "ERROR", silent)
        sys.exit(1)

    for i in json.loads(resp.text)["data"]["affected_items"]:
        if patternre.search(i["name"]):
            agents.append({"id": i["id"], "name": i["name"]})

    return agents

def get_agent_vulns(url: str, token: str, agent_id: int, severity, exceptions, logpath: str, silent: bool):
    vuln_pkgs = []
    ignored_pkgs = []
    vulnurl = url + "/vulnerability/" + str(agent_id)
    for i in severity:
        resp = requests.get(vulnurl, headers={"Authorization": "Bearer " + token},
                params={"severity": i, "select": "name,cve,condition"})
        if (resp.status_code != 200):
            log_msg("Failed to get agents from " + vulnurl + ". Status code: " + str(resp.status_code),
                    logpath, "ERROR", silent)
            sys.exit(1)
    
        for j in json.loads(resp.text)["data"]["affected_items"]:
            if j["name"] not in vuln_pkgs and j["condition"] != "Package unfixed" and j["name"] not in exceptions:
                vuln_pkgs.append(j["name"])
            if j["name"] not in ignored_pkgs and j["condition"] != "Package unfixed" and j["name"] in exceptions:
                log_msg("Ignoring " + j["name"] + " on agent " + str(agent_id) + ": listed as exception", logpath, "INFO", silent)
                ignored_pkgs.append(j["name"])

    return vuln_pkgs

def render_csv(vulns):
    csvstr = ""
    for i in vulns:
        for j in vulns[i]:
            csvstr += i + "," + j + "\n"

    if csvstr == "":
        return None
    else:
        return csvstr

def send_mail(vulns_csv: str, smtp_host: str, smtp_port: int,
        mail_from: str, mail_to, mail_subject: str,
        config_severity, config_hostfilter, config_exceptions,
        logpath: str, silent: bool):

    datestr = datetime.datetime.now().strftime("%Y-%m-%d")
    timestr = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    message = MIMEMultipart()
    message["subject"] = mail_subject
    message["From"] = mail_from
    message["To"] = ','.join(mail_to)

    if vulns_csv is not None:
        bodytext = "Lines in CSV: " + str(len(vulns_csv.split("\n"))) + "\n"
    else:
        bodytext = "No vulnerable package found.\n"
    bodytext += "\nSettings\n"
    bodytext += "severity: " + ','.join(config_severity) + "\n"
    bodytext += "hostfilter: " + config_hostfilter + "\n"
    bodytext += "exceptions: " + ','.join(config_exceptions) + "\n\n"
    bodytext += "Generated by wazuh-cve-mailer.py at " + timestr + "\n\n"
    body = MIMEText(bodytext)

    message.attach(body)

    if vulns_csv is not None:
        attachment = MIMEText(vulns_csv)
        attachment.add_header("Content-Disposition", "attachment", filename="cve-" + datestr + ".csv")
        message.attach(attachment)

    try:
        with smtplib.SMTP(smtp_host, smtp_port) as sh:
            sh.sendmail(mail_from, mail_to, message.as_string())
    except Exception as e:
        log_msg("Failed to send mail: " + str(e), logpath, "ERROR", silent)
        return

    log_msg("Sent mail for target: to=" + ','.join(mail_to) + 
            ";severity=" + ','.join(config_severity) + ";hostfilter=" + config_hostfilter +
            ";exceptions=" + ','.join(config_exceptions),
            logpath, "INFO", silent)

def main():
    args = parse_args()
    config = read_config(args.config, args.logfile, args.s)
    token = get_token(config["wazuh"]["url"],
            config["wazuh"]["user"], config["wazuh"]["pw"], args.logfile, args.s)

    for i in config["targets"]:
        vulns = {}
        for j in get_agents(config["wazuh"]["url"], token, i["cve"]["hostfilter"], args.logfile, args.s):
            if "exceptions" in i["cve"]:
                vulns[j["name"]] = get_agent_vulns(config["wazuh"]["url"], token, j["id"],
                                   i["cve"]["severity"], i["cve"]["exceptions"], args.logfile, args.s)
            else:
                vulns[j["name"]] = get_agent_vulns(config["wazuh"]["url"], token, j["id"],
                                   i["cve"]["severity"], [], args.logfile, args.s)
    
        if "exceptions" in i["cve"]:
            send_mail(render_csv(vulns), config["smtp"]["host"], config["smtp"]["port"],
                    i["mail"]["from"], i["mail"]["to"], i["mail"]["subject"],
                    i["cve"]["severity"], i["cve"]["hostfilter"], i["cve"]["exceptions"],
                    args.logfile, args.s)
        else:
            send_mail(render_csv(vulns), config["smtp"]["host"], config["smtp"]["port"],
                    i["mail"]["from"], i["mail"]["to"], i["mail"]["subject"],
                    i["cve"]["severity"], i["cve"]["hostfilter"], [],
                    args.logfile, args.s)
        
    sys.exit(0)

if __name__ == "__main__":
    main()
